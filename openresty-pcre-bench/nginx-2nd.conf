daemon off;
worker_processes  1;
error_log stdout;
events {
    worker_connections 1024;
}

#pcre_jit on;

http {
  init_by_lua_block {
    function clock_time(title, block)
      local st = os.clock()
      block()
      local ed = os.clock()

      ngx.say(title .. ": " .. ed-st.. " sec")
    end
  }


  server {
    listen 80;

    location / {
      index index.html;
    }
    location /lua {
      default_type text/html;
      content_by_lua_block {
        ngx.say("hello, lua")
      }
    }

    location = /lua/string_match {
      default_type text/html;
      content_by_lua_block {
        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local endpoint = "http://xxxx.xxx.xxx.xxx:1123"

        local title = string.format("[time string_match c=%d]", c)
        clock_time(title, function()
          local host = ""
          for i = 1, c do
            host = string.match(endpoint, "^http://(.*)")
          end
        end)
      }
    }

    location = /lua/re_match {
      default_type text/html;
      content_by_lua_block {
        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local endpoint = "http://xxxx.xxx.xxx.xxx:1123"

        local title = string.format("[time re_match c=%d]", c)
        clock_time(title, function()
          local m,err = nil, nil
          for i = 1, c do
            m, err = ngx.re.match(endpoint, [[^http://(.*)]])
          end
        end)
      }
    }

    location = /lua/re_match_optimize {
      default_type text/html;
      content_by_lua_block {
        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local endpoint = "http://xxxx.xxx.xxx.xxx:1123"

        local title = string.format("[time re_match c=%d]", c)
        clock_time(title, function()
          local m,err = nil, nil
          for i = 1, c do
            m, err = ngx.re.match(endpoint, [[^http://(.*)]], "jo")
          end
        end)
      }
    }

  }
}
