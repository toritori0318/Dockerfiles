#daemon off;
worker_processes  1;
error_log /dev/stdout warn;
events {
    worker_connections 1024;
}

pcre_jit on;

http {
  init_by_lua_block {
    function clock_time(title, block)
      local st = os.clock()
      block()
      local ed = os.clock()

      ngx.say(title .. ": " .. ed-st.. " sec")
    end
  }


  server {
    listen 80;

    location / {
      index index.html;
    }
    location /lua {
      default_type text/html;
      content_by_lua_block {
        ngx.say("hello, lua")
      }
    }

    location = /lua/ngx_re_split {
      default_type text/html;
      content_by_lua_block {
        local ngx_re = require "ngx.re"
        -- ngx_re.opt("jit_stack_size", 128 * 1024)

        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local d = "aaaaaaa,bbbbbbbbbbb,ccccccccccccc,ddddddddddddddd,eeeeeeeeeeeeee,f,ggggg,hhh,iii,jjjjjjj,k"

        clock_time("ngx_re_split", function()
          for i = 1, c do
            local t, err = ngx_re.split(d, ",")
            if err then
              ngx.log(ngx.ERR, string.format("err: %s", err))
            else
              -- ngx.log(ngx.WARN, string.format("t: %d", #t))
            end
          end
        end)
      }
    }

    location = /lua/lua_split_a {
      default_type text/html;
      content_by_lua_block {
        local function csplit(str,sep)
           local ret={}
           local n=1
           for w in str:gmatch("([^"..sep.."]*)") do
              ret[n] = ret[n] or w -- only set once (so the blank after a string is ignored)
              if w=="" then
                 n = n + 1
              end -- step forwards on a blank but not a string
           end
           return ret
        end

        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local d = "aaaaaaa,bbbbbbbbbbb,ccccccccccccc,ddddddddddddddd,eeeeeeeeeeeeee,f,ggggg,hhh,iii,jjjjjjj,k"

        clock_time("lua_split_a", function()
          for i = 1, c do
            local t = csplit(d, ",")
            -- ngx.log(ngx.WARN, string.format("t: %d", #t))
          end
        end)
      }
    }

    location = /lua/lua_split_b {
      default_type text/html;
      content_by_lua_block {
        local function gsplit(s,sep)
           local i, done, g = 1, false, s:gmatch('(.-)'..sep..'()')
           local function pass(...)
              if ... == nil then
                 done = true
                 return s:sub(i)
              end
              i = select(select('#',...),...)
              return ...
           end
           return function()
              if done then
                 return
              end
              if s == '' or sep == '' then
                 done = true
                 return s
              end
              return pass(g())
           end
        end

        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local d = "aaaaaaa,bbbbbbbbbbb,ccccccccccccc,ddddddddddddddd,eeeeeeeeeeeeee,f,ggggg,hhh,iii,jjjjjjj,k"

        clock_time("lua_split_b", function()
          for i = 1, c do
            local t={} for c in gsplit(d, ",") do table.insert(t,c) end
            -- ngx.log(ngx.WARN, string.format("t: %d", #t))
          end
        end)
      }
    }

    location = /lua/lua_split_c {
      default_type text/html;
      content_by_lua_block {
        function string.gsplit(s, sep, plain)
           local start = 1
           local done = false
           local function pass(i, j, ...)
              if i then
                 local seg = s:sub(start, i - 1)
                 start = j + 1
                 return seg, ...
              else
                 done = true
                 return s:sub(start)
              end
           end
           return function()
              if done then
                 return
               end
              if sep == '' then
                 done = true
                 return s
              end
              return pass(s:find(sep, start, plain))
           end
        end

        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local d = "aaaaaaa,bbbbbbbbbbb,ccccccccccccc,ddddddddddddddd,eeeeeeeeeeeeee,f,ggggg,hhh,iii,jjjjjjj,k"

        clock_time("lua_split_c", function()
          for i = 1, c do
            local t={} for c in d:gsplit(",") do table.insert(t,c) end
            -- ngx.log(ngx.WARN, string.format("t: %d", #t))
          end
        end)
      }
    }

    location = /lua/lua_split_d {
      default_type text/html;
      content_by_lua_block {
        local strfind = string.find
        local strsub = string.sub
        local tinsert = table.insert
        local function strsplit(delimiter, text, plain)
           plain = plain or false
           local list = {}
           local pos = 1
           if strfind("", delimiter, 1, plain) then -- this would result in endless loops
              error("delimiter matches empty string!")
           end
           while 1 do
              local first, last = strfind(text, delimiter, pos, plain)
              if first then -- found?
                 tinsert(list, strsub(text, pos, first-1))
                 pos = last+1
              else
                 tinsert(list, strsub(text, pos))
                 break
              end
           end
           return list
        end

        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local d = "aaaaaaa,bbbbbbbbbbb,ccccccccccccc,ddddddddddddddd,eeeeeeeeeeeeee,f,ggggg,hhh,iii,jjjjjjj,k"

        clock_time("lua_split_d", function()
          for i = 1, c do
            local t = strsplit(",", d)
            -- ngx.log(ngx.WARN, string.format("t: %d", #t))
          end
        end)
      }
    }

    location = /lua/lua_split_e {
      default_type text/html;
      content_by_lua_block {
        local function split(str, pat)
           local t = {}  -- NOTE: use {n = 0} in Lua-5.0
           local fpat = "(.-)" .. pat
           local last_end = 1
           local s, e, cap = str:find(fpat, 1)
           while s do
              if s ~= 1 or cap ~= "" then
                 table.insert(t,cap)
              end
              last_end = e+1
              s, e, cap = str:find(fpat, last_end)
           end
           if last_end <= #str then
              cap = str:sub(last_end)
              table.insert(t, cap)
           end
           return t
        end

        local params = ngx.req.get_uri_args()
        local c = params["c"] or 1
        local d = "aaaaaaa,bbbbbbbbbbb,ccccccccccccc,ddddddddddddddd,eeeeeeeeeeeeee,f,ggggg,hhh,iii,jjjjjjj,k"

        clock_time("lua_split_e", function()
          for i = 1, c do
            local t = split(d, ",")
            -- ngx.log(ngx.WARN, string.format("t: %d", #t))
          end
        end)
      }
    }

  }
}
